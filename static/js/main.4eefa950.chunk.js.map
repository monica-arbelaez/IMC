{"version":3,"sources":["components/CicloDeVida.jsx","App.js","serviceWorker.js","index.js"],"names":["CicloDeVida","cambiarStateNombre","setState","nombre","nextProps","nextState","console","log","onClick","this","state","quotes","length","quote","map","element","index","key","author","axios","get","respuesta","data","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6SAEqBA,E,4MAUfC,mBAAqB,WACnB,EAAKC,SAAS,CAACC,OAAS,W,oEAVNC,EAAWC,GAG7B,OAFAC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,IACL,I,gDAEeD,GACtBE,QAAQC,IAAI,6C,+BASZ,OADAD,QAAQC,IAAI,wBAEV,iCACE,4BAAQC,QAASC,KAAKR,oBAAtB,uBACA,yDACA,2BAAG,uCAAH,IAAoBQ,KAAKC,MAAMP,QAE9BM,KAAKC,MAAMC,OAAOC,OAAO,EAAGH,KAAKC,MAAMC,OAAO,GAAGE,MAAM,GAExD,4BACGJ,KAAKC,MAAMC,OAAOG,KAAI,SAACC,EAASC,GAC7B,OAAO,wBAAIC,IAAKD,GACV,qCAAWD,EAAQG,QAClBH,EAAQF,c,2CAUzBP,QAAQC,IAAI,iCACZE,KAAKN,OAAS,QACdM,KAAKP,SAAS,CACVS,OAAS,O,iKAKbL,QAAQC,IAAI,mC,SAcWY,IAAMC,IAAI,0I,OAA7BC,E,OACJZ,KAAKP,SAAS,CAACS,OAASU,EAAUC,KAAKX,S,2GA7DNY,aCS1BC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.4eefa950.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nexport default class CicloDeVida extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        console.log(nextProps);\r\n        console.log(nextState);\r\n        return true\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        console.log(\"Se ejecuto el componentWillReceiveProps\") \r\n      } \r\n      \r\n      cambiarStateNombre = () => {\r\n        this.setState({nombre : \"Pedro\"})\r\n      }\r\n      \r\n      render(){ \r\n        console.log(\"Se ejecuto el render\")\r\n        return(\r\n          <article>\r\n            <button onClick={this.cambiarStateNombre}>Cambiar Prop Nombre</button>\r\n            <p>Hola desde class component</p>\r\n            <p><b>Nombre: </b> {this.state.nombre}</p>\r\n            \r\n            {this.state.quotes.length>0? this.state.quotes[0].quote:\"\"}\r\n            \r\n            <ul>\r\n              {this.state.quotes.map((element, index) => {\r\n                  return <li key={index}>\r\n                        <b>Autor: {element.author}</b>\r\n                        {element.quote}\r\n                        </li>\r\n                })\r\n               }\r\n             </ul>\r\n            {/* <CicloDeVida/> */}\r\n          </article>\r\n        );\r\n      }\r\n      componentWillMount(){\r\n        console.log(\"Se ejecuto componentWillMount\")\r\n        this.nombre = \"Oscar\"\r\n        this.setState({\r\n            quotes : []\r\n          })\r\n      }\r\n      \r\n      async componentDidMount(){\r\n        console.log(\"Se ejecuto el componentDidMount\"); \r\n      /*$.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\", {}, (data,status,jqXHR) => {\r\n        console.log(status,jqXHR)\r\n        this.setState({quotes:data.quotes})\r\n      }, \"json\" ) */\r\n       /*\r\n        let  respuesta =  await $.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\r\n        let data = JSON.parse(respuesta)\r\n       this.setState({quotes : data.quotes}) */\r\n      /* let  respuesta =  await fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\r\n        let data = await respuesta.json();\r\n        this.setState({quotes : data.quotes}) */\r\n        \r\n        \r\n        let respuesta =  await axios.get(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\");\r\n        this.setState({quotes : respuesta.data.quotes}) \r\n      \r\n      }\r\n    \r\n}\r\n","import React from 'react';\nimport CicloDeVida from './components/CicloDeVida';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CicloDeVida/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}